Traceback (most recent call last):
  File "/sdf/home/l/ldomine/.local/lib/python3.6/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/usr/local/lib/python3.6/dist-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.6/dist-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.6/dist-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.6/asyncio/base_events.py", line 484, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.6/dist-packages/nbclient/client.py", line 541, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/usr/local/lib/python3.6/dist-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/local/lib/python3.6/dist-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from torchvision import datasets, transforms
# Data file download directory
LOCAL_DATA_DIR = './mnist-data'
# Use prepared data handler from pytorch (torchvision)
dataset = datasets.MNIST(LOCAL_DATA_DIR, train=True, download=True,
                         transform=transforms.Compose([transforms.ToTensor()]))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mHTTPError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-2-c0990185e37e>[0m in [0;36m<module>[0;34m[0m
[1;32m      4[0m [0;31m# Use prepared data handler from pytorch (torchvision)[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m dataset = datasets.MNIST(LOCAL_DATA_DIR, train=True, download=True,
[0;32m----> 6[0;31m                          transform=transforms.Compose([transforms.ToTensor()]))
[0m
[0;32m/usr/local/lib/python3.6/dist-packages/torchvision/datasets/mnist.py[0m in [0;36m__init__[0;34m(self, root, train, transform, target_transform, download)[0m
[1;32m     77[0m [0;34m[0m[0m
[1;32m     78[0m         [0;32mif[0m [0mdownload[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 79[0;31m             [0mself[0m[0;34m.[0m[0mdownload[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     80[0m [0;34m[0m[0m
[1;32m     81[0m         [0;32mif[0m [0;32mnot[0m [0mself[0m[0;34m.[0m[0m_check_exists[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.6/dist-packages/torchvision/datasets/mnist.py[0m in [0;36mdownload[0;34m(self)[0m
[1;32m    144[0m         [0;32mfor[0m [0murl[0m[0;34m,[0m [0mmd5[0m [0;32min[0m [0mself[0m[0;34m.[0m[0mresources[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    145[0m             [0mfilename[0m [0;34m=[0m [0murl[0m[0;34m.[0m[0mrpartition[0m[0;34m([0m[0;34m'/'[0m[0;34m)[0m[0;34m[[0m[0;36m2[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 146[0;31m             [0mdownload_and_extract_archive[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mdownload_root[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mraw_folder[0m[0;34m,[0m [0mfilename[0m[0;34m=[0m[0mfilename[0m[0;34m,[0m [0mmd5[0m[0;34m=[0m[0mmd5[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    147[0m [0;34m[0m[0m
[1;32m    148[0m         [0;31m# process and save as torch files[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.6/dist-packages/torchvision/datasets/utils.py[0m in [0;36mdownload_and_extract_archive[0;34m(url, download_root, extract_root, filename, md5, remove_finished)[0m
[1;32m    254[0m         [0mfilename[0m [0;34m=[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mbasename[0m[0;34m([0m[0murl[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    255[0m [0;34m[0m[0m
[0;32m--> 256[0;31m     [0mdownload_url[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mdownload_root[0m[0;34m,[0m [0mfilename[0m[0;34m,[0m [0mmd5[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    257[0m [0;34m[0m[0m
[1;32m    258[0m     [0marchive[0m [0;34m=[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mjoin[0m[0;34m([0m[0mdownload_root[0m[0;34m,[0m [0mfilename[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.6/dist-packages/torchvision/datasets/utils.py[0m in [0;36mdownload_url[0;34m(url, root, filename, md5)[0m
[1;32m     82[0m                 )
[1;32m     83[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 84[0;31m                 [0;32mraise[0m [0me[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     85[0m         [0;31m# check integrity of downloaded file[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     86[0m         [0;32mif[0m [0;32mnot[0m [0mcheck_integrity[0m[0;34m([0m[0mfpath[0m[0;34m,[0m [0mmd5[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.6/dist-packages/torchvision/datasets/utils.py[0m in [0;36mdownload_url[0;34m(url, root, filename, md5)[0m
[1;32m     70[0m             urllib.request.urlretrieve(
[1;32m     71[0m                 [0murl[0m[0;34m,[0m [0mfpath[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 72[0;31m                 [0mreporthook[0m[0;34m=[0m[0mgen_bar_updater[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     73[0m             )
[1;32m     74[0m         [0;32mexcept[0m [0;34m([0m[0murllib[0m[0;34m.[0m[0merror[0m[0;34m.[0m[0mURLError[0m[0;34m,[0m [0mIOError[0m[0;34m)[0m [0;32mas[0m [0me[0m[0;34m:[0m  [0;31m# type: ignore[attr-defined][0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/lib/python3.6/urllib/request.py[0m in [0;36murlretrieve[0;34m(url, filename, reporthook, data)[0m
[1;32m    246[0m     [0murl_type[0m[0;34m,[0m [0mpath[0m [0;34m=[0m [0msplittype[0m[0;34m([0m[0murl[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    247[0m [0;34m[0m[0m
[0;32m--> 248[0;31m     [0;32mwith[0m [0mcontextlib[0m[0;34m.[0m[0mclosing[0m[0;34m([0m[0murlopen[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mdata[0m[0;34m)[0m[0;34m)[0m [0;32mas[0m [0mfp[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    249[0m         [0mheaders[0m [0;34m=[0m [0mfp[0m[0;34m.[0m[0minfo[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    250[0m [0;34m[0m[0m

[0;32m/usr/lib/python3.6/urllib/request.py[0m in [0;36murlopen[0;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[1;32m    221[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    222[0m         [0mopener[0m [0;34m=[0m [0m_opener[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 223[0;31m     [0;32mreturn[0m [0mopener[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mdata[0m[0;34m,[0m [0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    224[0m [0;34m[0m[0m
[1;32m    225[0m [0;32mdef[0m [0minstall_opener[0m[0;34m([0m[0mopener[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/lib/python3.6/urllib/request.py[0m in [0;36mopen[0;34m(self, fullurl, data, timeout)[0m
[1;32m    530[0m         [0;32mfor[0m [0mprocessor[0m [0;32min[0m [0mself[0m[0;34m.[0m[0mprocess_response[0m[0;34m.[0m[0mget[0m[0;34m([0m[0mprotocol[0m[0;34m,[0m [0;34m[[0m[0;34m][0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    531[0m             [0mmeth[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mprocessor[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 532[0;31m             [0mresponse[0m [0;34m=[0m [0mmeth[0m[0;34m([0m[0mreq[0m[0;34m,[0m [0mresponse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    533[0m [0;34m[0m[0m
[1;32m    534[0m         [0;32mreturn[0m [0mresponse[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/lib/python3.6/urllib/request.py[0m in [0;36mhttp_response[0;34m(self, request, response)[0m
[1;32m    640[0m         [0;32mif[0m [0;32mnot[0m [0;34m([0m[0;36m200[0m [0;34m<=[0m [0mcode[0m [0;34m<[0m [0;36m300[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    641[0m             response = self.parent.error(
[0;32m--> 642[0;31m                 'http', request, response, code, msg, hdrs)
[0m[1;32m    643[0m [0;34m[0m[0m
[1;32m    644[0m         [0;32mreturn[0m [0mresponse[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/lib/python3.6/urllib/request.py[0m in [0;36merror[0;34m(self, proto, *args)[0m
[1;32m    568[0m         [0;32mif[0m [0mhttp_err[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    569[0m             [0margs[0m [0;34m=[0m [0;34m([0m[0mdict[0m[0;34m,[0m [0;34m'default'[0m[0;34m,[0m [0;34m'http_error_default'[0m[0;34m)[0m [0;34m+[0m [0morig_args[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 570[0;31m             [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_call_chain[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    571[0m [0;34m[0m[0m
[1;32m    572[0m [0;31m# XXX probably also want an abstract factory that knows when it makes[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/lib/python3.6/urllib/request.py[0m in [0;36m_call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    502[0m         [0;32mfor[0m [0mhandler[0m [0;32min[0m [0mhandlers[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    503[0m             [0mfunc[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mhandler[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 504[0;31m             [0mresult[0m [0;34m=[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    505[0m             [0;32mif[0m [0mresult[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    506[0m                 [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/lib/python3.6/urllib/request.py[0m in [0;36mhttp_error_default[0;34m(self, req, fp, code, msg, hdrs)[0m
[1;32m    648[0m [0;32mclass[0m [0mHTTPDefaultErrorHandler[0m[0;34m([0m[0mBaseHandler[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    649[0m     [0;32mdef[0m [0mhttp_error_default[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mreq[0m[0;34m,[0m [0mfp[0m[0;34m,[0m [0mcode[0m[0;34m,[0m [0mmsg[0m[0;34m,[0m [0mhdrs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 650[0;31m         [0;32mraise[0m [0mHTTPError[0m[0;34m([0m[0mreq[0m[0;34m.[0m[0mfull_url[0m[0;34m,[0m [0mcode[0m[0;34m,[0m [0mmsg[0m[0;34m,[0m [0mhdrs[0m[0;34m,[0m [0mfp[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    651[0m [0;34m[0m[0m
[1;32m    652[0m [0;32mclass[0m [0mHTTPRedirectHandler[0m[0;34m([0m[0mBaseHandler[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mHTTPError[0m: HTTP Error 503: Service Unavailable
HTTPError: HTTP Error 503: Service Unavailable

